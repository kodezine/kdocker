name: Release Docker Image

on:
  release:
    types: [published]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract version from tag
        id: version
        run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

      - name: Extract metadata (tags, labels)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=latest

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILD_DATE=${{ github.event.release.created_at }}
            VERSION=${{ steps.version.outputs.VERSION }}
            VCS_REF=${{ github.sha }}

      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v1
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          subject-digest: ${{ steps.build.outputs.digest }}
          push-to-registry: true

      - name: Create release notes
        run: |
          cat << EOF > release-notes.md
          ## Docker Image

          \`\`\`bash
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.VERSION }}
          \`\`\`

          Or use the latest tag:

          \`\`\`bash
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          \`\`\`

          ## Image Tags

          $(echo '${{ steps.meta.outputs.tags }}' | sed 's/^/- /')

          ## Components

          - Ubuntu 24.04 LTS
          - GCC 13.2 with multilib support
          - Clang with clang-format
          - CMake (latest from Kitware)
          - Python 3.13
          - Ruby 3.2
          - Perl 5.38
          - ARM Toolchain for Embedded (ATfE) 21.1.1
          - GNU ARM Toolchain 14.3.rel1
          - gcovr, ccache, Ninja

          ## Verification

          \`\`\`bash
          # Verify the image
          docker run --rm ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.VERSION }} bash -c "
            echo 'GCC:' && gcc --version | head -n1
            echo 'CMake:' && cmake --version | head -n1
            echo 'Python:' && python --version
            echo 'ARM ATfE:' && /opt/atfe21.1/bin/arm-none-eabi-gcc --version | head -n1
            echo 'ARM GNU:' && /opt/gnuarm14.3/bin/arm-none-eabi-gcc --version | head -n1
          "
          \`\`\`
          EOF

      - name: Update release with image info
        uses: softprops/action-gh-release@v1
        with:
          body_path: release-notes.md
          append_body: true